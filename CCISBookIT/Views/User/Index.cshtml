@using Microsoft.AspNetCore.Identity
@model IEnumerable<AppUser>
@inject UserManager<AppUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@{
    ViewData["Title"] = "List of Users";
}


<div class="row">
    <div class="col-md-10 offset-md-1">
        <h2>@ViewData["Title"]</h2>
        <a href="@Url.Action("DownloadFacultyUsersCsv", "User")" class="btn btn-primary">Download Faculty Users CSV</a>

        <table class="table">
            <thead>
                <tr class="text-center">
                    <th>@Html.DisplayNameFor(model => model.FacultyID)</th>
                    <th>@Html.DisplayNameFor(model => model.UserName)</th>
                    <th>@Html.DisplayNameFor(model => model.Email)</th>
                    <th>@Html.DisplayNameFor(model => model.PhoneNumber)</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="text-center">
                        <td class="align-middle">
                            @Html.DisplayFor(modelItem => item.FacultyID)
                        </td>
                        <td class="align-middle">
                            @Html.DisplayFor(modelItem => item.FullName)
                        </td>
                        <td class="align-middle">
                            @Html.DisplayFor(modelItem => item.Email)
                        </td>
                        <td class="align-middle">
                            @Html.DisplayFor(modelItem => item.PhoneNumber)
                        <td class="align-middle">
                                @{
                                    var user = await UserManager.FindByIdAsync(item.Id);
                                    var roles = await UserManager.GetRolesAsync(user);
                                    var roleNames = string.Join(", ", roles);
                                    @roleNames
                                }
                        </td>
                        <td class="align-middle">
                            <a href="@Url.Action("Edit", "User", new { FacultyID = item.FacultyID })" class="btn btn-primary">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                            <a href="@Url.Action("Detail", "User", new { FacultyID = item.FacultyID })" class="btn btn-info">
                                <i class="bi bi-eye"></i> Detail
                            </a>
                                @{
                                    var currentUser = await UserManager.GetUserAsync(User);
                                    var isAdmin = await UserManager.IsInRoleAsync(currentUser, "Admin");
                                }
                                @if (isAdmin)
                                {
                                <button class="btn btn-danger disabled" disabled>
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                                }
                                else
                                {
                                <a href="@Url.Action("Delete", "User", new { FacultyID = item.FacultyID })" class="btn btn-danger">
                                    <i class="bi bi-trash"></i> Delete
                                </a>
                                }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
